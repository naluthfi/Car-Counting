// PlayVideoFileCpp.sln
// main.cpp

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/video/background_segm.hpp>
#include <iostream>
#include "bgsegm.hpp"

using namespace cv;
using namespace std;

int main(void) {
    cv::VideoCapture capVideo ("mobilku.mp4");
    cv::Mat imgFrame;
    cv::Mat grayscaleFrame;
    cv::Ptr<cv::BackgroundSubtractor> bg_model = cv::createBackgroundSubtractorMOG2().dynamicCast<cv::BackgroundSubtractor>();
/*	Mat resizeF;
	Mat fgMaskMOG; //fg mask generated by MOG method
	Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	Mat fgMaskGMG; //fg mask fg mask generated by GMG method
	Mat fgMaskKNN; //fg mask fg mask generated by KNN method

	Ptr< BackgroundSubtractor> pMOG; //MOG Background subtractor
	Ptr< BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
	Ptr< BackgroundSubtractor> pGMG; //GMG Background subtractor
	Ptr< BackgroundSubtractor> pKNN; //KNN Background subtractor

	//create
	pMOG = cv::bgsegm::createBackgroundSubtractorMOG();
	pMOG2 = createBackgroundSubtractorMOG2();
	pGMG = cv::bgsegm::createBackgroundSubtractorGMG();
	pKNN = createBackgroundSubtractorKNN();
*/
    if (!capVideo.isOpened()) {                                                 // if unable to open video file
        std::cout << "\nerror reading video file" << std::endl << std::endl;      // show error message
        return(0);                                                              // and exit program
    }
	cv::namedWindow( "video", 1);
    for( ; ; )
    {
	cv::Mat frame;
        capVideo >> frame;
        if(frame.empty()) break;
        imshow("video", frame);
/*
		resize(frame, resizeF, Size(frame.size().width / 4, frame.size().height / 4));
		pMOG->apply(resizeF, fgMaskMOG);
		pMOG2->apply(resizeF, fgMaskMOG2);
		pGMG->apply(resizeF, fgMaskGMG);
		pKNN->apply(resizeF, fgMaskKNN);

		//morphologyEx(fgMaskGMG, fgMaskGMG, CV_MOP_OPEN, element); 

		imshow("Origin", resizeF);
		imshow("MOG", fgMaskMOG);
		imshow("MOG2", fgMaskMOG2);
		imshow("GMG", fgMaskGMG);
		imshow("KNN", fgMaskKNN);
*/
	cvtColor(frame, grayscaleFrame, CV_BGR2GRAY);
        equalizeHist(grayscaleFrame, grayscaleFrame);
        cv::Mat grayFrame, foregroundMask, foregroundFrame, backgroundFrame;
	cv::namedWindow("grayFrame",1);
        cv::imshow("grayFrame", grayscaleFrame);
        cv::waitKey(20); // waits to display frame
	if( foregroundMask.empty() ){
                  foregroundMask.create(frame.size(), frame.type());
               }
	bg_model->apply(frame, foregroundMask, true ? -1 : 0);
	cv::GaussianBlur(foregroundMask, foregroundMask, cv::Size(11,11), 3.5,3.5);
	cv::threshold(foregroundMask, foregroundMask, 10, 255, cv::THRESH_BINARY);
	foregroundFrame = cv::Scalar::all(0);
	frame.copyTo(foregroundFrame, foregroundMask);
	bg_model->getBackgroundImage(backgroundFrame);
	imshow("foreground mask", foregroundMask);
        imshow("foreground frame", foregroundFrame);
	cv::waitKey(40);
    }
    cv::waitKey(0); 

/*    capVideo.read(imgFrame);

    while (capVideo.isOpened()) {

        cv::imshow("imgFrame", imgFrame);

        if ((capVideo.get(CV_CAP_PROP_POS_FRAMES) + 1) < capVideo.get(CV_CAP_PROP_FRAME_COUNT)) {       // if there is at least one more frame
            capVideo.read(imgFrame);                            // read it
	cv::Mat frame;
	capVideo>>frame;
        cvtColor(frame, grayscaleFrame, CV_BGR2GRAY);
        equalizeHist(grayscaleFrame, grayscaleFrame);
        cv::Mat grayFrame;
        cv::imshow("grayFrame", grayFrame);
        }
        else {                                                  // else
            std::cout << "end of video\n";                      // show end of video message
            break;                                              // and jump out of while loop
        }

        cv::waitKey(1);

    }
*/

    return(0);
}








